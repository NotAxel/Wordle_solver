from collections import defaultdict
from ensurepip import version
import random
import os
from typing import DefaultDict, Tuple

def read_in_words() -> Tuple[list[str], list[str]]:
    """
    :word_bank: is list of all possible 5 letter words
    :answer_key: is list of all possible wordle solutions
    """

    word_bank = []
    # read in word bank
    f = open("word_bank.txt", "r")
    for word in f:
        word =  word.lower().strip()

        word_bank.append(word)

    answer_key = []
    # read in possible answers
    f = open("possible_words.txt", "r")
    for word in f:
        word  = word.lower().strip()

        answer_key.append(word)
    
    return word_bank, answer_key

def get_five_first_guesses() -> list[str]:
    """
    Return list of 5 best first guesses, generated by 3Blue1Brown
    """
    rec_words = ["salet", "crate", "trace", "slate", "reast"]

    return rec_words

def find_letter_indexs(word, letter):
    return [i for i, ltr in enumerate(word) if ltr == letter]

def compare_guess_result(word :  str, curr_guess : str, guess_result : str):

    for i in range(len(guess_result)):
        # ! correct letter at correct place
        # ? means correct letter at wrong place
        # . means incorrect letter

        if guess_result[i] == '!' and curr_guess[i] != word[i]:
            return False
        elif guess_result[i] == '?':
            if curr_guess[i] == word[i]:
                return False
            elif curr_guess[i] not in word:
                return False
        elif guess_result[i] == '.':

            count = 0

            letter_index_guess = find_letter_indexs(word=curr_guess[:i], letter=curr_guess[i])
            for idx in letter_index_guess:
                if guess_result[idx] != '.':
                    count += 1

            letter_index_word = find_letter_indexs(word=word, letter=curr_guess[i])
            if len(letter_index_word) > count:
                return False

    return True

def update_possible_words(word_list, curr_guess : str, guess_result : str) -> list[str]:
    word_list_out = []

    for word in word_list:
        if compare_guess_result(word=word, curr_guess=curr_guess, guess_result=guess_result):
            word_list_out.append(word)
    
    return word_list_out

def evaluate_ai_guess(guessed_word : str, answer : str) -> str: 
    output = ''
    seen_dict = defaultdict(int)

    for i, ltr in enumerate(guessed_word):
        seen_dict[ltr] += 1
        if ltr == answer[i] and len(find_letter_indexs(word=answer, letter=ltr)) >= seen_dict.get(ltr):
            output += '!'
        elif ltr != answer[i] and ltr in answer:
            if len(find_letter_indexs(word=answer, letter=ltr)) >= seen_dict.get(ltr):
                output += '?'
            else: 
                output += '.'
            
        else:
            output += '.'

    return output

def pick_word(word_list) -> str:
    if len(word_list) > 0:
        return word_list[0]

    return ''

def play(ai = False, verbose = False, answer = '', selection_version = '') -> int:

    guess_result = ''
    curr_guess = ''
    num_guesses = 0
        
    # read in word bank as well as answer key
    word_bank, answer_key = read_in_words()

    # if no predetermined answer is selected pick a random word
    if answer == '':
        answer = random.choice(answer_key)
        print("Answer is: ", answer)
    
    while len(word_bank) > 0:
        if verbose and not ai:
            print("Remaing words in answer key: ", len(word_bank))

        if num_guesses == 0 and selection_version == '3blue1brown':
            curr_guess = random.choice(get_five_first_guesses())
        else:
            curr_guess = pick_word(word_list=word_bank)

        if verbose or not ai: 
                print("Current guess: ", curr_guess)

        if ai:

            guess_result = evaluate_ai_guess(guessed_word=curr_guess, answer=answer)

        else:
            guess_result = input('Guess result: ')
            
        if verbose:
            print(guess_result)

        num_guesses += 1

        # the correct word was guessed
        if guess_result == '!!!!!':
            break
        
        
        word_bank = update_possible_words(word_bank, curr_guess, guess_result)
        
    if guess_result == '!!!!!':
        print("guessed in", num_guesses)
    else:
        print("could not guess word", answer)
    
    
    return num_guesses
        

n_games = 1
total_guesses = 0

v_one = ''
v_two = '3blue1brown'

random.seed(1)

for game_num in range(n_games):
    total_guesses += play(ai=False, verbose=True, selection_version=v_one, answer='nines')

print("average guesses", (total_guesses / n_games))

# play(ai=False, verbose=True, answer='plaid')
